// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ChainlinkCancelled extends ethereum.Event {
  get params(): ChainlinkCancelled__Params {
    return new ChainlinkCancelled__Params(this);
  }
}

export class ChainlinkCancelled__Params {
  _event: ChainlinkCancelled;

  constructor(event: ChainlinkCancelled) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ChainlinkFulfilled extends ethereum.Event {
  get params(): ChainlinkFulfilled__Params {
    return new ChainlinkFulfilled__Params(this);
  }
}

export class ChainlinkFulfilled__Params {
  _event: ChainlinkFulfilled;

  constructor(event: ChainlinkFulfilled) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ChainlinkRequested extends ethereum.Event {
  get params(): ChainlinkRequested__Params {
    return new ChainlinkRequested__Params(this);
  }
}

export class ChainlinkRequested__Params {
  _event: ChainlinkRequested;

  constructor(event: ChainlinkRequested) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SugarPretzel__currentConditionsResult {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: i32;
  value7: i32;
  value8: i32;
  value9: i32;
  value10: i32;
  value11: i32;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: i32,
    value7: i32,
    value8: i32,
    value9: i32,
    value10: i32,
    value11: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromI32(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8))
    );
    map.set(
      "value9",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value9))
    );
    map.set(
      "value10",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value10))
    );
    map.set(
      "value11",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value11))
    );
    return map;
  }

  getTimestamp(): BigInt {
    return this.value0;
  }

  getPrecipitationPast12Hours(): i32 {
    return this.value1;
  }

  getPrecipitationPast24Hours(): i32 {
    return this.value2;
  }

  getPrecipitationPastHour(): i32 {
    return this.value3;
  }

  getPressure(): i32 {
    return this.value4;
  }

  getTemperature(): i32 {
    return this.value5;
  }

  getWindDirectionDegrees(): i32 {
    return this.value6;
  }

  getWindSpeed(): i32 {
    return this.value7;
  }

  getPrecipitationType(): i32 {
    return this.value8;
  }

  getRelativeHumidity(): i32 {
    return this.value9;
  }

  getUvIndex(): i32 {
    return this.value10;
  }

  getWeatherIcon(): i32 {
    return this.value11;
  }
}

export class SugarPretzel__hausDerKunstLocationResult {
  value0: string;
  value1: string;

  constructor(value0: string, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }

  getLat(): string {
    return this.value0;
  }

  getLong(): string {
    return this.value1;
  }
}

export class SugarPretzel__locationInfoResult {
  value0: BigInt;
  value1: string;
  value2: Bytes;

  constructor(value0: BigInt, value1: string, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    return map;
  }

  getLocationKey(): BigInt {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getCountryCode(): Bytes {
    return this.value2;
  }
}

export class SugarPretzel__pretzelDataResult {
  value0: i32;
  value1: boolean;
  value2: boolean;
  value3: i32;
  value4: i32;

  constructor(
    value0: i32,
    value1: boolean,
    value2: boolean,
    value3: i32,
    value4: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    return map;
  }

  getBackground(): i32 {
    return this.value0;
  }

  getHalf(): boolean {
    return this.value1;
  }

  getSalt(): boolean {
    return this.value2;
  }

  getCoating(): i32 {
    return this.value3;
  }

  getTopping(): i32 {
    return this.value4;
  }
}

export class SugarPretzel extends ethereum.SmartContract {
  static bind(address: Address): SugarPretzel {
    return new SugarPretzel("SugarPretzel", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  currentConditions(): SugarPretzel__currentConditionsResult {
    let result = super.call(
      "currentConditions",
      "currentConditions():(uint256,uint24,uint24,uint24,uint24,int16,uint16,uint16,uint8,uint8,uint8,uint8)",
      []
    );

    return new SugarPretzel__currentConditionsResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toI32(),
      result[7].toI32(),
      result[8].toI32(),
      result[9].toI32(),
      result[10].toI32(),
      result[11].toI32()
    );
  }

  try_currentConditions(): ethereum.CallResult<
    SugarPretzel__currentConditionsResult
  > {
    let result = super.tryCall(
      "currentConditions",
      "currentConditions():(uint256,uint24,uint24,uint24,uint24,int16,uint16,uint16,uint8,uint8,uint8,uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SugarPretzel__currentConditionsResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toI32(),
        value[7].toI32(),
        value[8].toI32(),
        value[9].toI32(),
        value[10].toI32(),
        value[11].toI32()
      )
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOracleAddress(): Address {
    let result = super.call(
      "getOracleAddress",
      "getOracleAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getOracleAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOracleAddress",
      "getOracleAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasMintedGasless(param0: Address): boolean {
    let result = super.call(
      "hasMintedGasless",
      "hasMintedGasless(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_hasMintedGasless(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasMintedGasless",
      "hasMintedGasless(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hausDerKunstLocation(): SugarPretzel__hausDerKunstLocationResult {
    let result = super.call(
      "hausDerKunstLocation",
      "hausDerKunstLocation():(string,string)",
      []
    );

    return new SugarPretzel__hausDerKunstLocationResult(
      result[0].toString(),
      result[1].toString()
    );
  }

  try_hausDerKunstLocation(): ethereum.CallResult<
    SugarPretzel__hausDerKunstLocationResult
  > {
    let result = super.tryCall(
      "hausDerKunstLocation",
      "hausDerKunstLocation():(string,string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SugarPretzel__hausDerKunstLocationResult(
        value[0].toString(),
        value[1].toString()
      )
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastUpdate(): BigInt {
    let result = super.call("lastUpdate", "lastUpdate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastUpdate", "lastUpdate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  locationConditionsJobId(): Bytes {
    let result = super.call(
      "locationConditionsJobId",
      "locationConditionsJobId():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_locationConditionsJobId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "locationConditionsJobId",
      "locationConditionsJobId():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  locationInfo(): SugarPretzel__locationInfoResult {
    let result = super.call(
      "locationInfo",
      "locationInfo():(uint256,string,bytes2)",
      []
    );

    return new SugarPretzel__locationInfoResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toBytes()
    );
  }

  try_locationInfo(): ethereum.CallResult<SugarPretzel__locationInfoResult> {
    let result = super.tryCall(
      "locationInfo",
      "locationInfo():(uint256,string,bytes2)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SugarPretzel__locationInfoResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toBytes()
      )
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  precipitationConversionConstant(): i32 {
    let result = super.call(
      "precipitationConversionConstant",
      "precipitationConversionConstant():(uint24)",
      []
    );

    return result[0].toI32();
  }

  try_precipitationConversionConstant(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "precipitationConversionConstant",
      "precipitationConversionConstant():(uint24)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  pretzelData(param0: BigInt): SugarPretzel__pretzelDataResult {
    let result = super.call(
      "pretzelData",
      "pretzelData(uint256):(uint8,bool,bool,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new SugarPretzel__pretzelDataResult(
      result[0].toI32(),
      result[1].toBoolean(),
      result[2].toBoolean(),
      result[3].toI32(),
      result[4].toI32()
    );
  }

  try_pretzelData(
    param0: BigInt
  ): ethereum.CallResult<SugarPretzel__pretzelDataResult> {
    let result = super.tryCall(
      "pretzelData",
      "pretzelData(uint256):(uint8,bool,bool,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SugarPretzel__pretzelDataResult(
        value[0].toI32(),
        value[1].toBoolean(),
        value[2].toBoolean(),
        value[3].toI32(),
        value[4].toI32()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  temperatureConversionConstant(): i32 {
    let result = super.call(
      "temperatureConversionConstant",
      "temperatureConversionConstant():(int16)",
      []
    );

    return result[0].toI32();
  }

  try_temperatureConversionConstant(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "temperatureConversionConstant",
      "temperatureConversionConstant():(int16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateFrequency(): BigInt {
    let result = super.call(
      "updateFrequency",
      "updateFrequency():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_updateFrequency(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateFrequency",
      "updateFrequency():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get trustedForwarder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _link(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _oracle(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class FulfillLocationCurrentConditionsCall extends ethereum.Call {
  get inputs(): FulfillLocationCurrentConditionsCall__Inputs {
    return new FulfillLocationCurrentConditionsCall__Inputs(this);
  }

  get outputs(): FulfillLocationCurrentConditionsCall__Outputs {
    return new FulfillLocationCurrentConditionsCall__Outputs(this);
  }
}

export class FulfillLocationCurrentConditionsCall__Inputs {
  _call: FulfillLocationCurrentConditionsCall;

  constructor(call: FulfillLocationCurrentConditionsCall) {
    this._call = call;
  }

  get _requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _locationFound(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _locationResult(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _currentConditionsResult(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FulfillLocationCurrentConditionsCall__Outputs {
  _call: FulfillLocationCurrentConditionsCall;

  constructor(call: FulfillLocationCurrentConditionsCall) {
    this._call = call;
  }
}

export class MintGaslessCall extends ethereum.Call {
  get inputs(): MintGaslessCall__Inputs {
    return new MintGaslessCall__Inputs(this);
  }

  get outputs(): MintGaslessCall__Outputs {
    return new MintGaslessCall__Outputs(this);
  }
}

export class MintGaslessCall__Inputs {
  _call: MintGaslessCall;

  constructor(call: MintGaslessCall) {
    this._call = call;
  }
}

export class MintGaslessCall__Outputs {
  _call: MintGaslessCall;

  constructor(call: MintGaslessCall) {
    this._call = call;
  }
}

export class MintStandardCall extends ethereum.Call {
  get inputs(): MintStandardCall__Inputs {
    return new MintStandardCall__Inputs(this);
  }

  get outputs(): MintStandardCall__Outputs {
    return new MintStandardCall__Outputs(this);
  }
}

export class MintStandardCall__Inputs {
  _call: MintStandardCall;

  constructor(call: MintStandardCall) {
    this._call = call;
  }
}

export class MintStandardCall__Outputs {
  _call: MintStandardCall;

  constructor(call: MintStandardCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestLocationCurrentConditionsCall extends ethereum.Call {
  get inputs(): RequestLocationCurrentConditionsCall__Inputs {
    return new RequestLocationCurrentConditionsCall__Inputs(this);
  }

  get outputs(): RequestLocationCurrentConditionsCall__Outputs {
    return new RequestLocationCurrentConditionsCall__Outputs(this);
  }
}

export class RequestLocationCurrentConditionsCall__Inputs {
  _call: RequestLocationCurrentConditionsCall;

  constructor(call: RequestLocationCurrentConditionsCall) {
    this._call = call;
  }
}

export class RequestLocationCurrentConditionsCall__Outputs {
  _call: RequestLocationCurrentConditionsCall;

  constructor(call: RequestLocationCurrentConditionsCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetLocationConditionsJobIdCall extends ethereum.Call {
  get inputs(): SetLocationConditionsJobIdCall__Inputs {
    return new SetLocationConditionsJobIdCall__Inputs(this);
  }

  get outputs(): SetLocationConditionsJobIdCall__Outputs {
    return new SetLocationConditionsJobIdCall__Outputs(this);
  }
}

export class SetLocationConditionsJobIdCall__Inputs {
  _call: SetLocationConditionsJobIdCall;

  constructor(call: SetLocationConditionsJobIdCall) {
    this._call = call;
  }

  get _locationConditionsJobId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetLocationConditionsJobIdCall__Outputs {
  _call: SetLocationConditionsJobIdCall;

  constructor(call: SetLocationConditionsJobIdCall) {
    this._call = call;
  }
}

export class SetOracleCall extends ethereum.Call {
  get inputs(): SetOracleCall__Inputs {
    return new SetOracleCall__Inputs(this);
  }

  get outputs(): SetOracleCall__Outputs {
    return new SetOracleCall__Outputs(this);
  }
}

export class SetOracleCall__Inputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleCall__Outputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }
}

export class SetUpdateFrequencyCall extends ethereum.Call {
  get inputs(): SetUpdateFrequencyCall__Inputs {
    return new SetUpdateFrequencyCall__Inputs(this);
  }

  get outputs(): SetUpdateFrequencyCall__Outputs {
    return new SetUpdateFrequencyCall__Outputs(this);
  }
}

export class SetUpdateFrequencyCall__Inputs {
  _call: SetUpdateFrequencyCall;

  constructor(call: SetUpdateFrequencyCall) {
    this._call = call;
  }

  get delta(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetUpdateFrequencyCall__Outputs {
  _call: SetUpdateFrequencyCall;

  constructor(call: SetUpdateFrequencyCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawLinkCall extends ethereum.Call {
  get inputs(): WithdrawLinkCall__Inputs {
    return new WithdrawLinkCall__Inputs(this);
  }

  get outputs(): WithdrawLinkCall__Outputs {
    return new WithdrawLinkCall__Outputs(this);
  }
}

export class WithdrawLinkCall__Inputs {
  _call: WithdrawLinkCall;

  constructor(call: WithdrawLinkCall) {
    this._call = call;
  }
}

export class WithdrawLinkCall__Outputs {
  _call: WithdrawLinkCall;

  constructor(call: WithdrawLinkCall) {
    this._call = call;
  }
}
